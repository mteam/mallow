// Generated by CoffeeScript 1.3.3
(function() {
  var Module, Package, addToPackage, compilers, findPackageFile, fs, path,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Package = require("./package");

  compilers = require("./compilers");

  Module = require("module");

  path = require("path");

  fs = require("fs");

  findPackageFile = function(dir, name) {
    var file, modulePath, _i, _len, _ref;
    _ref = Module._nodeModulePaths(dir);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      modulePath = _ref[_i];
      file = path.join(modulePath, name, 'package.json');
      if (fs.existsSync(file)) {
        return file;
      }
    }
  };

  addToPackage = function(json, dir, pkg) {
    var dirs, sources;
    if ((!(json.engines != null)) || (__indexOf.call(Object.keys(json.engines), 'browser') < 0)) {
      return;
    }
    if (!(dirs = json.directories)) {
      throw new Error("you must specify directories in " + json.name + " package.json");
    }
    if (!(sources = dirs.lib || dirs.src)) {
      throw new Error("you must specify lib or src directory in " + json.name + " package.json");
    }
    sources = path.resolve(dir, sources);
    pkg.add({
      prefix: json.name,
      path: sources
    });
    if (json.dependencies != null) {
      return Object.keys(json.dependencies).forEach(function(dependency) {
        var file;
        if (!(file = findPackageFile(dir, dependency))) {
          throw new Error("cannot find package.json for " + dependency);
        }
        return addToPackage(require(file), path.dirname(file), pkg);
      });
    }
  };

  module.exports = function(file) {
    var dir, json, pkg;
    file = path.resolve(file);
    dir = path.dirname(file);
    json = require(file);
    pkg = new Package(json.name);
    addToPackage(json, dir, pkg);
    return pkg;
  };

  module.exports.compilers = compilers;

}).call(this);
